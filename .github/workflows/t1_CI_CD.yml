name: T1 - Data Collection & Processing CI/CD

on:
    push:
        branches: [t1_development]
    pull_request:
        branches: [t1_development]

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8]

        steps:
            - uses: actions/checkout@v2
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8
                  if [ -f data_lake/backend/requirements.txt ]; then pip install -r data_lake/backend/requirements.txt; fi
            - name: Lint with flake8
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --ignore=E402,E226,W503,W504
            - name: Build .env.test
              run: |
                  echo FLASK_APP=app.py > data_lake/backend/.env.test  
                  echo FLASK_DEBUG=1 >> data_lake/backend/.env.test  
                  echo FLASK_ENV=development >> data_lake/backend/.env.test  
                  echo MONGO_ATLAS_USERNAME=${{secrets.T1_MONGO_ATLAS_USERNAME_TEST}} >> data_lake/backend/.env.test  
                  echo MONGO_ATLAS_PASSWORD=${{secrets.T1_MONGO_ATLAS_PASSWORD_TEST}} >> data_lake/backend/.env.test  
                  echo MONGO_ATLAS_CLUSTER=${{secrets.T1_MONGO_ATLAS_CLUSTER_TEST}} >> data_lake/backend/.env.test  
                  echo MONGO_ATLAS_SERVER=${{secrets.T1_MONGO_ATLAS_SERVER_TEST}} >> data_lake/backend/.env.test
            - name: Test with pytest
              run: |
                cd data_lake/backend/
                sh runTests.sh

    build_and_push:
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        needs: test

        steps:
            - name: Checkout master
              uses: actions/checkout@v2
            - name: Create backend .env file
              run: |
                  echo FLASK_APP=app.py > data_lake/backend/.env  
                  echo FLASK_DEBUG=1 >> data_lake/backend/.env  
                  echo FLASK_ENV=development >> data_lake/backend/.env  
                  echo MONGO_ATLAS_USERNAME=${{secrets.T1_MONGO_ATLAS_USERNAME}} >> data_lake/backend/.env  
                  echo MONGO_ATLAS_PASSWORD=${{secrets.T1_MONGO_ATLAS_PASSWORD}} >> data_lake/backend/.env  
                  echo MONGO_ATLAS_CLUSTER=${{secrets.T1_MONGO_ATLAS_CLUSTER}} >> data_lake/backend/.env  
                  echo MONGO_ATLAS_SERVER=${{secrets.T1_MONGO_ATLAS_SERVER}} >> data_lake/backend/.env
            - name: Docker Hub login
              run: |
                  docker login -u ${{secrets.T1_DOCKERHUB_USERNAME}} -p ${{secrets.T1_DOCKERHUB_PASSWORD}}
            - name: Run docker-compose.yml
              run: |
                cd data_lake/
                docker-compose -f "docker-compose.yml" up -d --build
            - name: Docker push images
              env:
                  DOCKERHUB_REPO: "dsmeic/ds-meic2"
                  BACKEND_TAG: "backend"
                  GRAFANA_TAG: "grafana"
              run: |
                  docker tag data_lake_${BACKEND_TAG} ${DOCKERHUB_REPO}:${BACKEND_TAG}
                  docker push ${DOCKERHUB_REPO}:${BACKEND_TAG}
                  docker tag data_lake_${GRAFANA_TAG} ${DOCKERHUB_REPO}:${GRAFANA_TAG}
                  docker push ${DOCKERHUB_REPO}:${GRAFANA_TAG}

    deploy:
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        needs: build_and_push

        steps:
            - name: Deploy to Digital Ocean via SSH action
              uses: appleboy/ssh-action@v0.1.3
              env:
                  DOCKERHUB_REPO: "dsmeic/ds-meic2"
                  BACKEND_TAG: "backend"
                  GRAFANA_TAG: "grafana"
              with:
                  host: ${{secrets.T1_SSH_IP}}
                  username: ${{secrets.T1_SSH_USERNAME}}
                  password: ${{secrets.T1_SSH_PASSWORD}}
                  envs: DOCKERHUB_REPO,BACKEND_TAG,GRAFANA_TAG
                  script: |
                      docker stop ${BACKEND_TAG}
                      docker stop ${GRAFANA_TAG}
                      docker rm ${BACKEND_TAG}
                      docker rm ${GRAFANA_TAG}
                      docker pull ${DOCKERHUB_REPO}:${BACKEND_TAG}
                      docker pull ${DOCKERHUB_REPO}:${GRAFANA_TAG}
                      docker run -d -p 8001:5000 --restart always --network grafnet --name ${BACKEND_TAG} ${DOCKERHUB_REPO}:${BACKEND_TAG}
                      docker run -d -p 9000:3000 --restart always --network grafnet --name ${GRAFANA_TAG} ${DOCKERHUB_REPO}:${GRAFANA_TAG}
